import matplotlib as plt
import sympy as smp
import numpy as np
import scipy as sp

g = smp.symbols('g')
t = smp.symbols('t')
m1 = smp.symbols('m1')
l1 = smp.symbols('l1')

phi1 = smp.symbols('phi1', cls=smp.Function)
dphi1dt = smp.diff(phi1, t)
d2phi1dt2 = smp.diff(dphi1dt, t)

x1 = l1 * smp.sin(phi1)
y1 = -l1 * smp.cos(phi1)

E_kin = 0.5 * m1 * (smp.diff(x1,t)**2 + smp.diff(y1,t)**2)

E_pot= m1 * g * y1

LA1 = E_kin - E_pot



LA1DGL = smp.diff(L1,phi1) - smp.diff(smp.diff(L1, d2phi1dt2),t)



q1 = smp.lambdify((g, t, l1, m1, phi1, dphi1dt), smp.solve(d2phi1dt2))


def dUdt(U, m1, l1, t, g): S = phi1 
return[q1(phi1)]

t = np.linspace(0, 60, 500)
g = 9.81
m1 = 1
l1 = 1
